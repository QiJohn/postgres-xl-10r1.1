参考链接：https://developer.aliyun.com/article/61292、https://blog.csdn.net/qq_52668274/article/details/125031504、https://blog.csdn.net/jackgo73/article/details/122543660、http://feelkill.github.io/2017/08/02/pg-snapshot.html、https://blog.csdn.net/Hehuyi_In/article/details/124975687、https://blog.csdn.net/jackgo73/article/details/126008914、https://www.2ndquadrant.com/en/blog/back-to-postgresql-and-postgres-xl/、http://mbukowicz.github.io/databases/2020/05/01/snapshot-isolation-in-postgresql.html


（一）简介
	快照是记录数据库当前瞬时状态的一个数据结构，通过获取快照，可以在执行query等场景时了解数据库的相关信息。pg的快照主要保存：当前所有活跃事务的最小、最大事务ID、当前活跃事务列表、commandID等。
	快照可以分为多种类型，每种快照类型都对应了一种判断元组可见性的方法。快照本身的数据和快照对应的规则共同决定元组是否可见。
	read committed隔离级别的事务，在事务中每次执行一条query，都需要获取快照，query执行结束就会释放快照。
	repeatable read与serializable隔离级别的事务，则是在事务第一次执行query时获取快照，快照持续到事务结束释放。
	快照是一组静态数据，不同时刻获取的快照数据不一样。



（二）快照类型
	快照的类型，决定了快照对应的规则，这些规则用于判断元组的可见性。其对应的规则有NOW快照规则、UPDATE快照规则、SELF快照规则、ANY快照规则、TOAST快照规则、DIRTY快照规则、MVCC快照规则、VACUUM快照规则。




（三）关键变量
	snapshot中的关键变量有xmin、xmax、xip[]数组，这些值都与事务相关。小于xmin的事务都已经执行完；大于或等于xmax的事务号还没分配给对应的事务；介于xmin和xmax之间的事务有些正在执行、有些已经执行完毕，其中存储在xip[]数组中的事务是正在执行的。




（四）snapshot too old
	在PG中使用vacuum对dead tuple进行回收处理，当快照可见的tuple作为dead tuple被vacuum回收后，就会出现“snapshot too old”的错误。
	在9.6后的版本中引入参数“old_snapshot_threshold”，这个参数设置在使用快照时，一个快照可以被使用而没有发生“snapshot too old” 错误的风险的最小时间。超过此阈值时间的dead tuple将允许被清除。

	哪些情况可能导致snapshot too old错误（包含了backend_xmin的事务，只要SQL的执行时间超过old_snapshot_threshold阈值，并且该SQL读取到了LSN超过快照存储的LSN的数据块时）
		1、 snapshot too old报错通常出现在非常大的SQL，同时读取的数据块在不断的变化。
		2、snapshot too old也可能出现在pg_dump备份数据库时，因为pg_dump使用的是repeatable read隔离级别，快照是在事务启动后的第一条SQL创建的，备份时间长的话，极有可能在备份过程中读取到LSN大于快照LSN的数据块，导致snapshot too old报错。

	相关函数
		在PG中使用函数“TestForOldSnapshot”判断“snapshot too old”。通过比较"timestamp"进行判断
		在XL中函数“GetSnapshotFromGlobalSnapshot”增加针对“globalSnapshot”的“snapshot too old”判断。通过比较“xmind”进行判断



（五）XL中各类snapshot对应的具体结构体及解析
	1、GTM_SnapshotData
		1.1、CN、DN分别与GTM进行交互，从GTM处获取SnapshotData数据，并使用这些数据设置GlobalSnapshotData。涉及的函数GetSnapshotData-->GetPGXCSnapshotData-->GetSnapshotDataFromGTM-->GetSnapshotGTM-->get_snapshot；get_snapshot通过socket获取数据
		1.2、每个事务在启动、结束、一阶段提交、二阶段提交都会从GTM那获取snapshot信息

	2、SnapshotData
		该结构体定义如下所示：typedef struct SnapshotData{
				SnapshotSatisfiesFunc satisfies;	/* tuple test function */  //该函数指针指向不同类型快照中tuple可见性判断函数，如HeapTupleSatisfiesMVCC、HeapTupleSatisfiesDirty等
				TransactionId xmin;			/* all XID < xmin are visible to me */
				TransactionId xmax;			/* all XID >= xmax are invisible to me */
				TransactionId *xip;
				uint32		xcnt;			/* # of xact ids in xip[] */  //当前活跃事务的个数
				#ifdef PGXC  /* PGXC_COORD */
					uint32		max_xcnt;		/* Max # of xact in xip[] */  //最大当前活跃事务的个数
				#endif
				TransactionId *subxip;
				int32		subxcnt;		/* # of xact ids in subxip[] */
				bool		suboverflowed;	/* has the subxip array overflowed? */
				bool		takenDuringRecovery;	/* recovery-shaped snapshot? */
				bool		copied;			/* false if it's a static snapshot */
				CommandId	curcid;			/* in my xact, CID < curcid are visible */

				uint32		speculativeToken;
				uint32		active_count;	/* refcount on ActiveSnapshot stack */
				uint32		regd_count;		/* refcount on RegisteredSnapshots */
				pairingheap_node ph_node;	/* link in the RegisteredSnapshots heap */

				TimestampTz whenTaken;		/* timestamp when snapshot was taken */
				XLogRecPtr	lsn;			/* position in the WAL stream when taken */
			} SnapshotData;
		2.1、在获取SnapshotData时，用户可配置snapshot来源，在GlobalSnapshot数据的来源为GTM时：当”globalsnapshot“数据有效，则直接依据”globalsnapshot“设置”snapshot“；否则先从GTM中获取snapshot数据，再依据”globalsnapshot“设置”snapshot“

	3、GlobalSnapshotData
		定义的对应的全局变量为“globalSnapshot”。通过该全局快照来确保，不同DN上tuple的修改操作同时可见。
		GlobalSnapshot的数据来源分两类GLOBAL_SNAPSHOT_SOURCE_GTM、GLOBAL_SNAPSHOT_SOURCE_COORDINATOR，通过变量GlobalSnapshotSource进行判断。

	4、SerializedSnapshotData    【暂未涉及】




（六）快照对于数据库性能的影响
	参考链接：https://cloud.tencent.com/developer/article/2065490?from=15425
	每个连接数据库的client端都会需要快照(使用函数GetSnapshotData)，快照的构造、快照数据的更新、是否有效等等都会影响与client端的数据交互。尤其在高并发情况下，快照会对于数据库的性能影响更大。




（七）快照何时需要更新
	快照唯一需要更新的时机是：之前运行的一个事务提交了。（快照最根本的功能是提供运行事务id列表，列表中最大的那个就是xmax了，事务提交后就相当于不在运行事务列表中了，在做可见性判断时如果不在运行事务列表中，就知道事务已经提交或回滚了，这就需要继续走标志位 或 clog判断了；但是如果事务ID在运行事务列表中，那就一定没提交，不需要做任何进一步判断）
	在事务的隔离级别为”SERIALIZABLE”或“REPEATABLE READ“时，其它session的commit操作，是不改变当前snapshot的内容；在事务的隔离级别为”READ COMMITTED“时，其它session的commit操作，会导致当前snapshot update，即当前事务下，每执行一个sql语句都会重新获取一个snapshot，也即在其它session的操作对于当前事务而言是可见的。




（八）snapshot数据传递
	CN、DN都会直接与GTM进行交互，通过函数get_snapshot从而获取snapshot的数据信息；CN与DN进行交互，通过函数pgxc_node_send_snapshot向DN发送snapshot信息。
	GTM中的snapshot信息是globalsnapshot的信息来源，PG的snapshot数据的信息来源又是globalsnapshot。



（九）可见性判断，可见性包括两部分：事务可见性、tuple可见性
	9.1、XL事务可见性
		设某事务T的事务id为xid，根据上述性质，我们可以很方便的得出事务T可见性的判断流程：
		步骤1：比较xid与xmin。如果xid < xmin，则T对当前事务可见，否则执行步骤2。
		步骤2：比较xid与xmax。如果xid >= xmax，则T对当前事务不可见，否则执行步骤3。
		步骤3：在活跃事务数组中查找xid。如果xid存在于活跃事务数组，则T对当前事务不可见，否则T对当前事务可见。
		使用函数“XidInMVCCSnapshot”判断基于指定快照，事务是否可见。

	9.2、XL中tuple可见性
		针对tuple的状态进行判断的函数及其作用如下所示：
			HeapTupleSatisfiesMVCC()：判断tuple对mvcc某一版本是否有效
			HeapTupleSatisfiesUpdate()：判断tuple是否可更新
			HeapTupleSatisfiesSelf()：判断tuple对于自身信息是否有效，不考虑事务之间的“相对时间因素”（即xip）
			HeapTupleSatisfiesDirty()：判断元组是否已脏，是否需要重新从磁盘读取
			HeapTupleSatisfiesVacuum()：visible to any running transaction, used by VACUUM
			HeapTupleSatisfiesToast()：visible unless part of interrupted vacuum, used for TOAST
			HeapTupleSatisfiesAny()：全部堆数据元组都可见，常见的使用场景是建立索引时（观察HOT链）
		在快照中通过统一的接口对tuple是否可见进行判断，该接口为结构体“SnapshotData”中定义的函数指针“satisfies”。该指针可以绑定的函数有HeapTupleSatisfiesSelf、HeapTupleSatisfiesAny、HeapTupleSatisfiesHistoricMVCC、HeapTupleSatisfiesMVCC、HeapTupleSatisfiesToast、HeapTupleSatisfiesDirty。






