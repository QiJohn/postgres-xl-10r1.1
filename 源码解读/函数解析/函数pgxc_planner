1、DN节点调用standard_planner(Query *parse, int cursorOptions, ParamListInfo boundParams) 函数，standard_planner又调用subquery_planner函数。
	subquery_planner 函数接受Query查询树，最后通过PlannedStmt结构体的形式返回Plan计划树。（Plan计划树被封装在PlannedStmt结构体中）subquery_planner函数负责创建计划，可以递归处理子查询。subquery_planner函数的工作分为两个部分：
	（1）依据消除冗余条件，减少查询层次，简化路径生成的基本思想，调用预处理函数对查询树进行处理
	（2）调用inheritance_planner 或者grouping_planner进入生成计划流程，此过程不对查询树做出实质性改变


2、CN节点调用pgxc_planner(Query *query, int cursorOptions, ParamListInfo boundParams) 函数，该函数的作用如下所示：
	（1）该statement可以直接被发送到DN，CN只是作为代理存在。该情况下，创建一个单节点plan；
	（2）该statement可以直接在CN上进行evaluated，不涉及query的传递并且standard_planner() is invoked to plan the  statement
	（3）该statement的evaluated同时涉及CN、DN，并且standard_planner() is invoked to plan the  statement
	PlannedStmt *pgxc_planner(Query *query, int cursorOptions, ParamListInfo boundParams)
	{
		PlannedStmt *result;

		/* see if can ship the query completely */
		result = pgxc_FQS_planner(query, cursorOptions, boundParams); //query可以直接被转发
		if (result)
			return result;

		/* we need Coordinator for evaluation, invoke standard planner */
		result = standard_planner(query, cursorOptions, boundParams);

		/*
		* For coordinator side execution, we must always force a transaction block
		* on the remote side. This ensures that all queries resulting from the
		* coordinator side execution are run within a block. For example, this
		* could be a user-defined function, which internally runs several queries,
		* where each query is separately checked for fast-query-shipping. We must
		* run all these queries inside a block.
		*/
		SetRequireRemoteTransactionBlock();
		return result;
	}



