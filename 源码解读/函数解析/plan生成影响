1、================对函数”create_unique_plan“的影响
/*
 * create_unique_plan
 *	  Create a Unique plan for 'best_path' and (recursively) plans for its subpaths.
 *
 *	  Returns a Plan node.
 */
static Plan *create_unique_plan(PlannerInfo *root, UniquePath *best_path, int flags)
{
	.......
#ifdef XCP
		/*
		 * RemoteSubplan is conditionally projection capable - it is pushing projection to the data nodes
		 */
		if (IsA(subplan, RemoteSubplan))
			subplan->lefttree->targetlist = newtlist;
#endif
	.......
}

调用”create_unique_plan“的函数有：create_plan_recurse

在函数”create_unique_plan“中，依次执行下列步骤：
	第一步：调用函数”create_plan_recurse“递归创建plan
	第二步：调用函数”build_path_tlist“为path的输出构造一个target list（例如：TargetEntry列表）
	第三步：如果top_plan节点不能进行投影并且它现有的targetlist已经不是我们需要的，我们需要添加一个Result节点来帮助它
	第四步：构建控制信息以显式在grouping步骤中，subplan的哪些输出列将接收检查
	第五步：如果是”UNIQUE_PATH_HASH“，则获取hash散列的相等运算符提供给Agg节点使用；
		否则，创建”ORDER BY列表“对输入进行兼容性排序，步骤如下：
			第一步：创建”ORDER BY列表
			第二步：调用函数”make_sort_from_sortclauses“，创建”sort plan“以根据给定的”sortclauses“进行排序
			第三步：调用函数”make_unique_from_sortclauses“创建"unique plan"
				在函数”make_unique_from_sortclauses“中，
					第一步：将 SortGroupClause 列表转换为 attr 索引和”相等运算符“组成的数组（如 executor 所希望的那样）
					第二步：针对XL，调用函数”find_push_down_plan“获取要push_down到的”RemoteSubplan“，以过滤掉重复数据，减少网络需要上需要发送的数据和Coordinator的负载
	第六步：调用函数”copy_generic_path_info“将cost data从path复制到plan





2、================新增加函数”create_remotescan_plan“
/*
 * create_remotescan_plan
 *	  Create a RemoteSubquery plan for 'best_path' and (recursively) plans for its subpaths.
 *
 *	  Returns a Plan node.
 */
static RemoteSubplan *create_remotescan_plan(PlannerInfo *root,   RemoteSubPath *best_path)
{
	RemoteSubplan  *plan;
	Plan	   	   *subplan;
	Bitmapset  	   *saverestrict;
	Path		   *subpath = best_path->subpath;
	List		   *pathkeys = best_path->path.pathkeys;
	int 			numsortkeys;
	AttrNumber	   *sortColIdx;
	Oid			   *sortOperators;
	Oid			   *collations;
	bool		   *nullsFirst;

	/*
	 * Subsequent code will modify current restriction, it needs to be restored
	 * so other path nodes in the outer tree could see correct value.
	 */
	saverestrict = root->curOuterRestrict;

	adjust_subplan_distribution(root, best_path->path.distribution,	subpath->distribution);

	/* We don't want any excess columns in the remote tuples */
	subplan = create_plan_recurse(root, subpath, CP_SMALL_TLIST);

	.......

	plan = make_remotesubplan(root, subplan, best_path->path.distribution, best_path->subpath->distribution, best_path->path.pathkeys);

	.......
}

调用”create_remotescan_plan“的函数有：create_plan_recurse

在函数”create_remotescan_plan“中，依次执行下列步骤：
	第一步：保存原有的restriction
	第二步：调用函数”adjust_subplan_distribution“确保subplan的distribution符合匹配要求
	第三步：使用函数”create_plan_recurse“递归创建plan
	第四步：调用函数”prepare_sort_from_pathkeys“依据给定的pathkeys准备sort
	第五步：如果当前子计划没有充分排序，则使用函数”make_sort“插入一个sort节点
	第六步：使用函数”make_remotesubplan“创建RemoteSubplan节点
	第七步：使用函数”copy_generic_path_info“从path节点拷贝cost、size信息到plan节点







3、================新增加函数”make_remotesubplan“
/*
*创建RemoteSubplan节点，在远程节点上执行子计划。
*leftree：我们要下推到远程节点的子计划。
*resultDistribution：远程结果的分布。可能为空，结果将到达调用节点。
*execDistribution：确定子计划的源数据是如何分布的，我们应该将子计划发送到哪里，以及如何合并结果。
*pathkeys：根据这些键对远程子计划进行排序，Executor应对传入的元组执行合并排序。
*/
RemoteSubplan *make_remotesubplan(PlannerInfo *root, Plan *lefttree, Distribution *resultDistribution, Distribution *execDistribution, List *pathkeys)
{
	RemoteSubplan *node = makeNode(RemoteSubplan);
	Plan	   *plan = &node->scan.plan;
	Bitmapset  *tmpset;
	int			nodenum;

	.........
}

调用”make_remotesubplan“的函数有：create_minmaxagg_plan、create_remotescan_plan、standard_planner、make_subplan、SS_process_ctes

在函数”make_remotesubplan“中，依次执行下列步骤：
	第一步：判断”resultDistribution“（即远程结果的分布）是否为空？
		不为空：
			第一步：如果存在”distributionExpr“，则从”target list“中获取”distribution expression“
			第二步：设置参数”distributionNodes“（该参数用于描述结果的分布）
			第三步：设置参数”distributionRestrict“（该参数描述结果实际上被ship到的node集合）
		为空：
			进行简单赋值处理，设置”node->distributionType = LOCATOR_TYPE_NONE;  node->distributionKey = InvalidAttrNumber; node->distributionNodes = NIL;“

	第二步：确定subplan将在哪些node上执行
		判断”execDistribution“（即确定子计划的源数据是如何分布的，我们应该将子计划发送到哪里，以及如何合并结果）是否为空？
		不为空：
			从”execDistribution“中获取node list，并设置参数”node->nodeList“、”node->execOnAll“，以确定subplan将在哪些node上执行
		为空：
			第一步：从”resultDistribution“中获取node list，并赋值给”tmpset“
			第二步：如果”tmpset“只有一个node，则表示在本地node上执行subplan；如果”tmpset“有多个node，则任意选择一个负载均衡的node执行subplan

	第三步：当有多个node产生tuples时，需要合并排序
		第一步：确定参与sort的最大数量为list_length(pathkeys)
		第二步：遍历pathkeys，使用如下步骤逐一处理每个成员pathkey：
			第一步：如果pathkey的”EquivalenceClass“是volatile，那么它一定来自 ORDER BY 子句，我们必须将它匹配到同一个目标列表条目；否则，可以按照pathkey的”EquivalenceClass“中列出的任何一个non-constant成员expression进行sort
			第二步：调用函数”get_opfamily_member“从pathkey中查找正确的sort operator
			第三步：调用函数”add_sort_column“构建排序信息数组
		第三步：创建”SimpleSort“类型的node，并给该节点设置数据

	第四步：对plan、node的其它成员变量进行赋值





4、================函数”pgxc_FQS_planner“
static PlannedStmt *pgxc_FQS_planner(Query *query, int cursorOptions, ParamListInfo boundParams)
{
	.........
	exec_nodes = pgxc_is_query_shippable(query, 0);  //如果query不需要进行shipped，则直接返回，执行函数”standard_planner()“
	if (exec_nodes == NULL)
		return NULL;
	.........

	top_plan = (Plan *)pgxc_FQS_create_remote_plan(query, exec_nodes, false); //将query转发到datanode,同时创建RemoteQuery节点
	.........
}

调用”pgxc_FQS_planner“的函数有：pgxc_planner
在函数”pgxc_FQS_planner“中，依次执行下列步骤：
	第一步：出现以下情况直接return NULL：没有启用enable_fast_query_shipping；需要向后滚动的游标语句不使用FQS；游标语句不使用FQS；”EXEC  DIRECT“语句不使用FQS
	第二步：使用函数“pgxc_is_query_shippable”确认query能否直接被ship，不能则直接return NULL
	第三步：构建类型为”PlannerGlobal“、”PlannerInfo“的节点node
	第四步：使用函数”pgxc_FQS_create_remote_plan“创建remote_plan
		在函数”pgxc_FQS_create_remote_plan“中，执行步骤如下所示：
			第一步：对”is_exec_direct“进行判断，如果是，则直接设置成utilityStmt；如果否，则构建”RemoteQuery“类型节点
			第二步：解析query树，以获取step query
			第三步：优化多节点处理
			第四步：使用函数”contains_temp_tables“判断query中是否使用了临时表
			第五步：调用函数”fix_opfuncids“给例如coordinator上的”ExecNodes->en_expr“计算opfuncid字段。（opfuncid即procedure OID）
			第六步：调用函数”get_plan_combine_type“获取combine_type
			第七步：为正在创建的remote query构建一个虚拟RTE（即构建一个”RangeTblEntry“类型node，将该node附加到虚拟RTE上，并设置类型为RTE_REMOTE_DUMMY）
	第五步：在创建”PlannedStmt“之前，使用函数”set_plan_references“进行最后的清理
	第六步：创建类型为”PlannedStmt“的节点node，并给成员变量commandType、canSetTag、utilityStmt、resultRelations、planTree等赋值








总结：
在函数“planner”中，如果是其它CN转发过来的query则直接执行函数“standard_planner”，否则执行函数“pgxc_planner”。
	在函数“pgxc_planner”中，如果query可以被完整的ship，则直接执行函数“pgxc_FQS_planner”，否则执行“standard_planner”。
		在函数“pgxc_FQS_planner”中，如果statement能够直接在DN上被完整评估，则直接return NULL；如果使用函数“pgxc_is_query_shippable”确认query不能被直接ship，则直接return NULL；接着执行函数pgxc_FQS_create_remote_plan对query进行ship以及创建RemoteQuery节点。

	在函数“standard_planner”中，如果当前CN是本地CN且query为utilityStmt语句，则执行函数pgxc_direct_planner；接着执行“subquery_planner-->preprocess_expression-->SS_process_sublinks-->process_sublinks_mutator-->make_subplan”；接着执行函数“create_plan”；如果存在distribution，则执行“make_remotesubplan”。
		在函数“create_plan”中，使用函数“adjust_subplan_distribution”来确保subplan的distribution符合匹配要求；继续调用函数“create_plan_recurse”递归创建plan。
			在函数“create_plan_recurse”中，如果存在类型“T_RemoteSubplan”执行“create_remotescan_plan”；如果存在“T_Unique”则执行“create_unique_plan”。

		在函数“make_subplan”中，执行函数“create_plan”；如果存在distribution，则执行“make_remotesubplan”；执行函数“build_subplan”；如果IS_PGXC_LOCAL_COORDINATOR为真，只需要一个plan，直接返回。