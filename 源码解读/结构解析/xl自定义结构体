（1）结构体”Distribution“，定义该结构体的文件为”src/include/nodes/relation.h“。
	并将该结构体添加到结构体PlannerInfo、Path。
	#ifdef XCP
	/*
	* Distribution is an attribute of distributed plan node. It describes on which node execution results can be found.
	*/
	typedef struct Distribution
	{
		NodeTag		type;
		char		distributionType;
		Node	   *distributionExpr;
		Bitmapset  *nodes;
		Bitmapset  *restrictNodes;
	} Distribution;
	#endif




（2）结构体”RemoteSubPath“，定义该结构体的文件为”src/include/nodes/relation.h“。
	#ifdef XCP
	typedef struct RemoteSubPath
	{
		Path		path;
		Path	   *subpath;
	} RemoteSubPath;
	#endif



（3）结构体”ResponseCombiner“，定义该结构体的文件为”src/include/pgxc/execRemote.h“。
	/*
	* Common part for all plan state nodes needed to access remote datanodes
	* ResponseCombiner must be the first field of the plan state node so we can typecast
	*/
	typedef struct ResponseCombiner
	{
		ScanState	ss;						/* its first field is NodeTag */
		int			node_count;				/* total count of participating nodes */
		PGXCNodeHandle **connections;		/* Datanode connections being combined */
		int			conn_count;				/* count of active connections */
		.......

	}	ResponseCombiner;



（4）结构体”RemoteQueryState”，定义该结构体的文件为”src/include/pgxc/execRemote.h“。
	typedef struct RemoteQueryState
	{
		ResponseCombiner combiner;			/* see ResponseCombiner struct */
		bool		query_Done;				/* query has been sent down to Datanodes */
		.......

	}	RemoteQueryState;



（5）结构体”RemoteSubplanState”，定义该结构体的文件为”src/include/pgxc/execRemote.h“。
	/*
	* Execution state of a RemoteSubplan node
	*/
	typedef struct RemoteSubplanState
	{
		ResponseCombiner combiner;			/* see ResponseCombiner struct */
		char	   *subplanstr;				/* subplan encoded as a string */
		bool		bound;					/* subplan is sent down to the nodes */
		bool		local_exec; 			/* execute subplan on this datanode */
		Locator    *locator;				/* determine destination of tuples of locally executed plan */
		int 	   *dest_nodes;				/* allocate once */
		List	   *execNodes;				/* where to execute subplan should query be executed on all (true) or any (false) node specified in the execNodes list */
		bool 		execOnAll;
		int			nParamRemote;	    /* number of params sent from the master node */
		RemoteParam *remoteparams;  /* parameter descriptors */
	} RemoteSubplanState;




（6）结构体”RemoteStmt”，定义该结构体的文件为”src/include/pgxc/execRemote.h“。
	/*
	* Data needed to set up a PreparedStatement on the remote node and other data for the remote executor
	*/
	typedef struct RemoteStmt
	{
		NodeTag		type;
		CmdType		commandType;	/* select|insert|update|delete */
		bool		hasReturning;	/* is it insert|update|delete RETURNING? */
		bool		parallelModeNeeded;
		struct Plan *planTree;				/* tree of Plan nodes */
		List	   *rtable;					/* list of RangeTblEntry nodes rtable indexes of target relations for INSERT/UPDATE/DELETE */
		List	   *resultRelations;	/* integer list of RT indexes, or NIL */
		List	   *subplans;		/* Plan trees for SubPlan expressions */
		int			nParamExec;		/* number of PARAM_EXEC Params used */
		int			nParamRemote;	/* number of params sent from the master node */
		RemoteParam *remoteparams;  /* parameter descriptors */
		List	   *rowMarks;
		char		distributionType;
		AttrNumber	distributionKey;
		List	   *distributionNodes;
		List	   *distributionRestrict;
	} RemoteStmt;




（7）结构体”RemoteQuery”，定义该结构体的文件为”src/include/pgxc/planner.h“。
	/*
	* Contains instructions on processing a step of a query.
	* In the prototype this will be simple, but it will eventually evolve into a GridSQL-style QueryStep.
	*/
	typedef struct
	{
		Scan			scan;
		ExecDirectType		exec_direct_type;	/* track if remote query is execute direct and what type it is */
		char			*sql_statement;
		ExecNodes		*exec_nodes;		/* List of Datanodes where to launch query */
		CombineType		combine_type;
		SimpleSort		*sort;
		.......

	} RemoteQuery;




（8）结构体”RemoteSubplan”，定义该结构体的文件为”src/include/pgxc/planner.h“。
	/*
	* Going to be a RemoteQuery replacement.
	* Submit left subplan to the nodes defined by the Distribution and combine results.
	*/
	typedef struct
	{
		Scan		scan;
		char 		distributionType;
		AttrNumber	distributionKey;
		List 	   *distributionNodes;
		List 	   *distributionRestrict;
		List 	   *nodeList;
		bool 		execOnAll;
		SimpleSort *sort;
		char	   *cursor;
		int			unique;
	} RemoteSubplan;



（9）结构体”Shippability_context”，定义该结构体的文件为”src/include/pgxc/planner.h“。
	/*
	* FQS_context
	* This context structure is used by the Fast Query Shipping walker, to gather information during analysing query for Fast Query Shipping.
	*/
	typedef struct
	{
		bool		sc_for_expr;		/* if false, the we are checking shippability of the Query, otherwise, we are checking shippability of a stand-alone expression.*/
		Bitmapset	*sc_shippability;	/* The conditions for (un)shippability of the query.
		Query		*sc_query;			/* the query being analysed for FQS */
		int			sc_query_level;		/* level of the query */
		.......

	} Shippability_context;



（10）结构体”Locator”，定义该结构体的文件为”src/include/pgxc/locator.h、src/include/pgxc/locator.c“。
	table location information such as partitioning and replication information
	/*
	* Locator details are private
	*/
	struct _Locator
	{
		/*
		* Determine target nodes for value.
		* Resulting nodes are stored to the results array.
		* Function returns number of node references written to the array.
		*/
		int			(*locatefunc) (Locator *self, Datum value, bool isnull,
									bool *hasprimary);
		Oid			dataType; 		/* values of that type are passed to locateNodes function */
		LocatorListType listType;
		bool		primary;
		int			roundRobinNode; /* for LOCATOR_TYPE_RROBIN */
		LocatorHashFunc	hashfunc; /* for LOCATOR_TYPE_HASH */
		int 		valuelen; /* 1, 2 or 4 for LOCATOR_TYPE_MODULO */
		int			nodeCount; /* How many nodes are in the map */
		void	   *nodeMap; /* map index to node reference according to listType */
		void	   *results; /* array to output results */
	};
	typedef struct _Locator Locator;



