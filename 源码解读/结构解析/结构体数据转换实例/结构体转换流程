============================================结构体转换总体流程=================================================
阶段一系列流程：一个或多个SQL语句---->结构体RawStmt组成的list
	该阶段为parse阶段，通过函数”pg_parse_query“实现


阶段二系列流程：结构体RawStmt---->结构体Query---->结构体Query组成的list---->结构体PlannedStmt组成的list
	1、”结构体RawStmt---->结构体Query“为analyze阶段，通过函数”parse_analyze“实现。
			在该函数中调用”make_parsestate“构建结构体ParseState的变量，用于存储analyze阶段的状态信息
	2、”结构体Query---->结构体Query组成的list“为rewrite阶段，通过函数”pg_rewrite_query“实现。
	3、”结构体Query组成的list---->结构体PlannedStmt组成的list“为optimizer阶段，通过函数”pg_plan_queries“实现；在该流程中，需要遍历”结构体Query组成的list“，并将每个”Query“转换成一个结构体”PlannedStmt“，通过函数”pg_plan_query-->planner-->standard_planner“实现，详细实现在函数”standard_planner“中。


阶段三系列流程：结构体PlannedStmt组成的list---->结构体Portal
	1、先构建一个空的Portal，通过函数“CreatePortal("", true, true)”完成
	2、将结构体PlannedStmt组成的list赋值给“Portal->stmts”，通过函数“PortalDefineQuery”完成


阶段四系列流程：结构体Portal数据---->结构体QueryDesc
	1、依据“Portal->stmts”构建结构体QueryDesc，使用函数“CreateQueryDesc(......)”，将“Portal->stmts”中存储的内容赋值给“QueryDesc->plannedstmt”
	2、给结构体QueryDesc的未赋值字段进行赋值，如：
		2.1、函数“ExecutorStart(queryDesc, 0)”处理结构体QueryDesc
		2.2、在函数ExecutorStart中调用CreateExecutorState()构建结构体EState，并赋值给“QueryDesc->estate”；
		2.3、在函数InitPlan中通过函数“ExecInitNode(plan, estate, eflags)”构建结构体PlanState，"PlanState->state"由“QueryDesc->estate”赋值；“PlanState->plan”由“QueryDesc->plannedstmt->planTree”赋值，存放执行计划树；返回该PlanState并赋值给“QueryDesc->planstate”
			使用函数ExecAllocTableSlot构造“TupleTableSlot”类型的存储空间，赋值给“PlanState->ps_ResultTupleSlot”，后续用于存储执行该“PlanState”的返回结果
			基于结构体“Plan”的树型拓扑结构(执行计划树)会被转换成对应的基于结构体“PlanState”的树型结构

		2.4、使用函数CreateDestReceiver(DestProducer)创建数据接收端，并将其赋值给“QueryDesc->dest”
			在后续计划执行过程中，即ExecutorRun过程中，需要通过“QueryDesc->dest”中存储的指针函数将数据传输到客户端或者存储到指定位置
		2.5、将“QueryDesc”赋值给“Portal->queryDesc”

	3、依据结构体QueryDesc的数据进行处理，如：
		函数“ExecutorRun(queryDesc, ForwardScanDirection, 0L, true)”处理结构体QueryDesc
			在"ExecutorRun->ExecutePlan->ExecProcNode"过程中，通过处理“QueryDesc->planstate”执行“执行计划树”
		函数“ExecutorFinish(queryDesc)”处理结构体QueryDesc
		函数“ExecutorEnd(queryDesc)”处理结构体QueryDesc







=================================单个结构体”Query“转换成单个结构体”PlannedStmt“的总流程===================================
即：standard_planner中结构体转换流程
	流程一：结构体“Query”---->结构体“PlannerInfo”
	流程二：从结构体“PlannerInfo”获取结构体“RelOptInfo”
	流程三：从结构体“RelOptInfo”获取结构体“Path”
	流程四：结构体“Path”---->结构体“Plan”
	流程五：将结构体“Plan”赋值给结构体“PlannedStmt”的成员变量“planTree”

其中：
	“流程一”通过函数“subquery_planner”实现，在该阶段构建path、RelOptInfo，并进一步包装成PlannerInfo
		1、在函数“subquery_planner”中先通过“makeNode(PlannerInfo)”创建“PlannerInfo”

		2、预处理阶段(进行优化处理)
			2.1、add_base_rels_to_query函数遍历jointree，将搜索到的RangeTblEntry类型节点添加到“PlannerInfo->simple_rel_array”中
			2.2、deconstruct_jointree及distribute_qual_to_rels函数会将Mergejoinable的外连接约束语句依照其不同的类型分别保存到PlannerInfo的left_join_clauses、right_join_clauses、full_join_clauses中。即通过分析jointree中的约束qual，来构建baser rel之间的join信息
			2.3、reconsider_outer_join_clauses函数对left_join_clauses、right_join_clauses、full_join_clauses进行分类处理，从而“推导”出新的以EquivalenceClass表示的知识
			2.4、generate_base_implied_equalities函数将“推导”出新的以EquivalenceClass表示的知识“实例化”成RestrictInfo，并绑定到对应base rel的RelOptInfo中
			2.5、set_base_rel_sizes函数为每个base rel设置物理参数，包括选择率、获取的tuple数目等


		3、通过”grouping_planner-->query_planner"来调用函数”make_one_rel“创建“RelOptInfo”，并通过函数“add_path”向“RelOptInfo”添加构建的“Path”；
			或，构建join类型“RelOptInfo”，并通过函数“add_path”向“RelOptInfo”添加构建的“Path”；
			或，从结构体“PlannerInfo“的“simple_rel_array”获取”RelOptInfo“，并通过函数“add_path”向“RelOptInfo”添加构建的“Path”；
		4、将某方面较优的路径存放到结构体"RelOptInfo"的成员变量”pathlist“中，该”pathlist“为List指针，其中每个元素最终指向一个Path结构体
		5、将存储将代价最小的路径的结构体"RelOptInfo"，存放到结构体“PlannerInfo”的成员变量”upper_rels“中
		6、结构体"PlannerInfo"的成员变量"parse"为指针，指向结构体"Query"
		7、结构体“PlannerInfo”的成员变量“simple_rel_array”为一个数组，数组中每个元素存储基本表扫描路径对应的RelOptInfo，RelOptInfo类型为“RELOPT_BASEREL”，其cheapest_total_path类型为“SeqScan”
		8、结构体“PlannerInfo”的成员变量“join_rel_list”为一个list，链表中每个元素存储连接路径对应的RelOptInfo，例如，RelOptInfo类型为“RELOPT_JOINREL”，其cheapest_total_path类型为“HashPath”
		9、结构体“PlannerInfo”的成员变量“upper_rels”为一个数组，数组中每个成员类型为RelOptInfo，表示代表执行路径信息的RelOptInfo，例如RelOptInfo类型为“RELOPT_UPPER_REL”，其cheapest_total_path类型为“HashPath”
		10、通过预处理对结构体Query进行优化处理，并依据Query构建结构体PlannerInfo中相关字段信息，如遍历结构体“Query”中成员变量“jointree”的节点，当节点类型为“RangeTblRef”时，向结构体“PlannerInfo”的成员变量“simple_rel_array”添加对应的结构体RelOptInfo
		11、向结构体“PlannerInfo”的成员变量“sort_pathkeys”添加元组输出时的排序字段，例如将sql中排序语句“order by data”中的代表排序的字段“data”加入到“sort_pathkeys”。(Pathkey是一个向路径提供排序的数据结构)
		12、调用函数”distribute_restrictinfo_to_rels“将where语句表示的信息添加到结构体“RelOptInfo”的成员变量“baserestrictinfo”中，例如sql语句中“where id < 10”
		13、在结构体“PlannerInfo”中，成员变量“simple_rte_array”中存储的“RangeTblEntry”和成员变量“simple_rel_array”中存储的“RelOptInfo”，是逐一对应的，”RelOptInfo“由对应的”RangeTblEntry“转换而来
		14、构建完基于join类型的path节点后，继续构建基于sort、agg等类型的path，如下拓扑结构的path(先构建基表的SeqScan类型path；再构建连接基表的HashJoin类型的path，最后依次构建Agg、Sort等类型的path，最终组成一个path tree)
				path = 0x21bd818 path = {type = T_SortPath, pathtype = T_Sort...}，subpath = 0x21bd468}}
  				subpath = 0x21bd468   path = {type = T_AggPath, pathtype = T_Agg...}, subpath = 0x21bcc58...}}
			    subpath = 0x21bcc58   path = {type = T_HashPath, pathtype = T_HashJoin...}, jointype = JOIN_INNER, outerjoinpath = 0x21bbb08, innerjoinpath = 0x21bb9d8...}}
			    outerjoinpath = 0x21bbb08  path = {type = T_Path, pathtype = T_SeqScan...}
			    innerjoinpath = 0x21bb9d8  path = {type = T_Path, pathtype = T_SeqScan...}


	“流程二”通过函数“fetch_upper_rel”实现，即从结构体“PlannerInfo”的成员变量”upper_rels“中，获取结构体“RelOptInfo”的具体内容，如果“upper_rels”为空，则先构建再返回

	“流程三”通过函数“get_cheapest_fractional_path”实现，即从结构体“RelOptInfo”中，获取代价最小的path，并可以通过该path遍历整个path tree。
		实际数据举例，best_path地址为0x2139530
		按照”Path *“类型查看best_path内容为：{type = T_MergePath, pathtype = T_MergeJoin, parent = 0x21388f0, pathtarget = 0x213a2d0, param_info = 0x0, parallel_aware = 0 '\000', parallel_safe = 1 '\001',	parallel_workers = 0, rows = 25538, startup_cost = 317.01161949503773, total_cost = 711.38161949503774, pathkeys = 0x0, distribution = 0x2139778}
		按照”MergePath *“类型查看best_path内容为：{jpath = {path = {type = T_MergePath, pathtype = T_MergeJoin, parent = 0x21388f0, pathtarget = 0x213a2d0, param_info = 0x0, parallel_aware = 0 '\000',	parallel_safe = 1 '\001', parallel_workers = 0, rows = 25538, startup_cost = 317.01161949503773, total_cost = 711.38161949503774, pathkeys = 0x0, distribution = 0x2139778}, jointype = JOIN_INNER, inner_unique = 0 '\000', outerjoinpath = 0x21396e0, innerjoinpath = 0x2138560, joinrestrictinfo = 0x2139128, movedrestrictinfo = 0x0}, path_mergeclauses = 0x21393e0, outersortkeys = 0x0, innersortkeys = 0x2139440, skip_mark_restore = 0 '\000', materialize_inner = 0 '\000'}
		按照”JoinPath *“类型查看best_path内容为：{path = {type = T_MergePath, pathtype = T_MergeJoin, parent = 0x21388f0, pathtarget = 0x213a2d0, param_info = 0x0, parallel_aware = 0 '\000', parallel_safe = 1 '\001',	parallel_workers = 0, rows = 25538, startup_cost = 317.01161949503773, total_cost = 711.38161949503774, pathkeys = 0x0, distribution = 0x2139778}, jointype = JOIN_INNER,	inner_unique = 0 '\000', outerjoinpath = 0x21396e0, innerjoinpath = 0x2138560, joinrestrictinfo = 0x2139128, movedrestrictinfo = 0x0}

	“流程四”通过函数“create_plan”实现（在结构体plan组成的tree上添加新的结构体plan，通过makex_xxxx函数实现）。plan组成的tree，及plantree_list。并将该plan tree赋值给结构体“PlannedStmt”的字段“planTree”
		{join = {plan = {type = T_MergeJoin, startup_cost = 317.01161949503773, total_cost = 711.38161949503774, plan_rows = 25538, plan_width = 16, parallel_aware = 0 '\000', parallel_safe = 1 '\001', plan_node_id = 0, targetlist = 0x11f5c28, qual = 0x0, lefttree = 0x11f6030, righttree = 0x11f6760, initPlan = 0x0, extParam = 0x0, allParam = 0x0}, jointype = JOIN_INNER, inner_unique = 0 '\000', joinqual = 0x0}, skip_mark_restore = 0 '\000',mergeclauses = 0x11f66a8, mergeFamilies = 0x11f6878, mergeCollations = 0x11f6898, mergeStrategies = 0x11f68b8, mergeNullsFirst = 0x11f68d8 ""}








==========================================结构体之间关系======================================================
1、结构体”PlannerInfo“的成员变量”parse“为指针，指向结构体”Query“

2、结构体”PlannerInfo“的成员变量”upper_rels“为List指针数组，数组中存储为结构体”ListCell“，通过该结构体内指针变量指向结构体”RelOptInfo“

3、结构体”RelOptInfo“的成员变量”pathlist“为List指针，记录着生成该RelOptInfo时在某方面较优的路径，其中每个元素最终指向结构体Path

4、结构体“RemoteSubplan“、"CteScan"、”SeqScan“、”SampleScan“等各种类型的plan，其第一个成员变量都是“Plan”类型或其第一个成员变量的第一个成员变量是“Plan”类型，故这些类型的plan都可以使用'Plan*'指针进行传递，实际使用时只需要转换成实际的类型就可以了

5、结构体”RemoteSubplanState“、”ScanState“、”RemoteQueryState“、”CustomScanState“等各种类型的state，其第一个成员变量都是“PlanState”类型或其第一个成员变量的第一个成员变量是“PlanState”类型，故这些类型的state都可以使用‘PlanState*’指针进行传递，实际使用时只需要转换成实际的类型就可以了

6、结构体“ProducerState”都可以使用‘DestReceiver*’指针进行传递，实际使用时只需要转换成实际的类型就可以了

7、结构体“PlannedStmt”的字段“planTree”存储plan tree(即执行计划树)








==========================================Path构建流程=======================================================
总流程的入口函数为“make_one_rel”
流程一：构建基本关系的路径（即为每个基本关系的RelOptInfo结构生成路径，例如生成的T_SeqScan类型的Path）
	由函数“set_base_rel_pathlists(PlannerInfo *root)”实现。在函数中，遍历存储在数组“PlannerInfo->simple_rel_array”中的基本关系，为每一个基本关系生成一个RelOptInfo结构，并为其生成路径，以及将路径通过add_path存储到每个RelOptInfo结构的pathlist字段中


流程二：构建对基本关系的路径进行连接的路径(Join操作，例如生成T_HashJoin类型的Path)
	由函数“make_rel_from_joinlist(PlannerInfo *root, List *joinlist)”实现。在函数中，“joinlist”中每一个节点都代表一个基本关系(RangeTblRef)，依据每一个基本关系(RangeTblRef)从“PlannerInfo->simple_rel_array”获取对应的RelOptInfo，将这些RelOptInfo存储到一个list链表中，并调用动态规划算法从该list中生成包含最终路径的RelOptInfo结构，其中RelOptInfo的pathlist字段就是最终路径组成的链表


流程三：执行create_grouping_paths、create_window_paths、create_ordered_paths、create_distinct_paths等函数，在make_one_rel基础上继续构建group、order、distinct等类型的path；创建的group path放置在“PlannerInfo”结构体的“upper_rels[UPPERREL_GROUP_AGG]”内；创建的order path放置在“PlannerInfo”结构体的“upper_rels[UPPERREL_ORDERED]”内；创建的window path放置在“PlannerInfo”结构体的“upper_rels[UPPERREL_WINDOW]”内；创建的distinct path放置在“PlannerInfo”结构体的“upper_rels[UPPERREL_DISTINCT]”内。





==========================================Plan构建流程=======================================================
流程一：从数组“PlannerInfo->upper_rels”中获取结构体“RelOptInfo”的数据，实现函数“fetch_upper_rel(root, UPPERREL_FINAL, NULL)”

流程二：从结构体“RelOptInfo”中获取最优路径树path，如函数“get_cheapest_fractional_path(final_rel, tuple_fraction)”

流程三：依据最优路径树path、完整的PlannerInfo构建执行计划树，实现函数“create_plan(root, best_path)”
	调用函数“create_plan_recurse(root, best_path, CP_EXACT_TLIST);”递归遍历最优路径树path的每一个节点path，将每个path节点转换成对应的plan节点，从而构建执行计划树plan

流程四：构建结构体PlannedStmt，将执行计划树plan赋值给PlannedStmt的字段“planTree”







==========================================Plan执行流程=======================================================
流程一：依据结构体Query构建结构体PlannedStmt，如果存在多个Query，则将构建成的多个PlannedStmt组成一个list。

流程二：先构建一个空的Portal，通过函数“CreatePortal("", true, true)”完成

流程三：依据PlannedStmt组成的list、原始的SQL语句，对Portal进行初始化，通过函数“PortalDefineQuery(portal, NULL, query_string, commandTag, plantree_list, NULL);”完成

流程四：启动portal执行器，函数“PortalStart(portal, NULL, 0, InvalidSnapshot)”完成
	底层主要调用函数ExecutorStart进行处理

流程五：执行portal执行器，函数“PortalRun(portal, FETCH_ALL, isTopLevel, true, receiver, receiver, completionTag)”完成
	底层主要依次调用函数ExecutorRun进行执行、ExecutorFinish完成处理、ExecutorEnd结束处理

流程六：结束portal执行器，函数“PortalDrop(portal, false)”完成





